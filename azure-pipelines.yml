# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- develop

pr:
  branches:
    include:
    - develop

pool:
  vmImage: 'windows-2019'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'
  testProject: 'tests/MGroup.AISolve.MSolve.Tests'

steps:
- checkout: self
  fetchDepth: 0
  
- task: PowerShell@2
  displayName: Install gitversion.tool
  inputs:
    targetType: inline
    script: dotnet tool install --tool-path .. gitversion.tool
    pwsh: true

- task: PowerShell@2
  displayName: Set SemVer from git history and update AssemblyInfo
  inputs:
    targetType: inline
    script: ../dotnet-gitversion /updateassemblyinfo AssemblyInfo.cs AssemblyVersionInfo.cs /output buildserver 
    pwsh: true
    
- task: DotNetCoreCLI@2
  name: dotnetRestore
  displayName: "Restore nugets"
  inputs:
    command: 'restore'
    verbosityRestore: 'Normal'
    feedsToUse: 'config'
    nugetConfigPath: 'NuGet.config'

- task: SonarCloudPrepare@1
  enabled: false
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Prepares SonarCloud analysis"
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'mgroupntua'
    scannerMode: 'MSBuild'
    projectKey: 'MSolve.Core'
    extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage/coverage.opencover.xml'

- task: DotNetCoreCLI@2
  name: dotnetBuild
  displayName: "Build projects"
  inputs:
    command: 'build'
    arguments: '--no-restore --nologo --configuration $(buildConfiguration) /p:AssemblyVersion=$(GitVersion.AssemblySemVer) /p:Version=$(GitVersion.SemVer) /p:SourceLinkCreate=true'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.AssemblySemVer'


- task: DotNetCoreCLI@2
  enabled: false
  displayName: Runs Tests (develop)
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    publishTestResults: true

- task: PublishSymbols@2
  displayName: "Publish symbols to Azure Devops artifacts"
  inputs:
    DetailedLog: true
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: false
    SymbolServerType: 'TeamServices'

- task: SonarCloudAnalyze@1
  enabled: false
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Performs SonarCloud Analysis"

- task: SonarCloudPublish@1
  enabled: false
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: 'Publish Quality Gate Results'
  inputs:
    pollingTimeoutSec: '300'

- task: PublishCodeCoverageResults@1
  enabled: false
  inputs:
     summaryFileLocation: $(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml
     reportDirectory: $(Build.SourcesDirectory)/coverage/Cobertura
     codecoverageTool: cobertura

- task: DotNetCoreCLI@2
  name: dotnetPack
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Packages new nugets"
  inputs:
    command: 'pack'
    arguments: '--nologo --no-restore'
    nobuild: true
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.SemVer'
    verbosityPack: 'Normal'

- task: CopyFiles@2
  enabled: false
  displayName: "Copy everything in artifacts staging directory"
  inputs:
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
- task: PublishBuildArtifacts@1
  name: publishToFeed
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Publishes to pipeline artifacts"
  inputs:
    ArtifactName: 'drop'

- task: DotNetCoreCLI@2
  name: dotnetPushNugetPublic
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Push nugets to public feed"
  inputs:
    command: 'push'
    packagesToPush: '$(build.artifactStagingDirectory)/*.nupkg'
    verbosityPack: 'Normal'
    feedPublish: 'MSolve/MGroup'

- task: DotNetCoreCLI@2
  enabled: false
  condition: ne(variables['Build.Reason'], 'PullRequest')
  name: dotnetPushSymbolPublic
  displayName: "Publishes symbol nugets"
  inputs:
    command: 'push'
    searchPatternPush: '$(Build.ArtifactStagingDirectory)/*.snupkg'
    feedPublish: 'MSolve/MGroup'
